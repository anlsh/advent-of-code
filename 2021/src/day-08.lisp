(uiop:define-package :advent/2021/src/day-08
  (:use #:cl #:arrow-macros)
  (:local-nicknames (#:alx #:alexandria))
  (:export
   #:solve-8a
   #:solve-8b))

(in-package :advent/2021/src/day-08)

(defun string-to-set (string)
  (fset:convert 'fset:set string))

(defparameter *input*
  (-<> (uiop:read-file-lines "../inputs/08.txt")
    (mapcar (lambda (line)
              (let ((splits (str:split " | " line)))
                (list (fset:convert 'fset:set (mapcar #'string-to-set (str:split " " (car splits))))
                      (mapcar #'string-to-set (str:split " " (cadr splits))))))
            <>)))

(defun singleton-element (set)
  (if (/= 1 (fset:size set))
      (error (format nil "~a has size ~a" set (fset:size set)))
      (fset:arb set)))

(defun scrambles-to-nums (scrambles)
  (let ((nums-to-scrambles (fset:empty-map))
        (pos-to-scrambled (fset:empty-map)))
    (fset:image (lambda (x) (when (= 2 (fset:size x)) (setf (fset:@ nums-to-scrambles 1) x)))
                scrambles)
    (fset:image (lambda (x) (when (= 4 (fset:size x)) (setf (fset:@ nums-to-scrambles 4) x)))
                scrambles)
    (fset:image (lambda (x) (when (= 3 (fset:size x)) (setf (fset:@ nums-to-scrambles 7) x)))
                scrambles)
    (fset:image (lambda (x) (when (= 7 (fset:size x)) (setf (fset:@ nums-to-scrambles 8) x)))
                scrambles)
    (setf (fset:@ pos-to-scrambled #\a)
          (singleton-element (fset:set-difference (fset:@ nums-to-scrambles 7)
                                                  (fset:@ nums-to-scrambles 4))))
    (setf (fset:@ nums-to-scrambles 6)
          (singleton-element (fset:filter (lambda (x) (and (= 6 (fset:size x))
                                                           (not (fset:subset? (fset:@ nums-to-scrambles 1)
                                                                              x))))
                                          scrambles)))
    (setf (fset:@ pos-to-scrambled #\c)
          (singleton-element (fset:set-difference (fset:@ nums-to-scrambles 8)
                                                  (fset:@ nums-to-scrambles 6))))
    (let ((4plus7 (fset:union (fset:@ nums-to-scrambles 4)
                              (fset:@ nums-to-scrambles 7))))
      (setf (fset:@ nums-to-scrambles 9)
            (singleton-element (fset:filter (lambda (x) (and (= (fset:size x) (1+ (fset:size 4plus7)))
                                                             (fset:subset? 4plus7 x)))
                                            scrambles)))
      (setf (fset:@ pos-to-scrambled #\g)
            (singleton-element (fset:set-difference (fset:@ nums-to-scrambles 9) 4plus7))))
    (setf (fset:@ pos-to-scrambled #\e)
          (singleton-element (fset:set-difference (fset:@ nums-to-scrambles 8)
                                                  (fset:with (fset:@ nums-to-scrambles 9)
                                                             (fset:@ pos-to-scrambled #\g)))))
    (setf (fset:@ nums-to-scrambles 5)
          (fset:less (fset:@ nums-to-scrambles 6)
                     (fset:@ pos-to-scrambled #\e)))
    (setf (fset:@ nums-to-scrambles 0)
          (singleton-element (fset:set-difference (fset:filter (lambda (x) (= 6 (fset:size x)))
                                                               scrambles)
                                                  (fset:set (fset:@ nums-to-scrambles 6)
                                                            (fset:@ nums-to-scrambles 9)))))
    (setf (fset:@ pos-to-scrambled #\d)
          (singleton-element (fset:set-difference (fset:@ nums-to-scrambles 8)
                                                  (fset:@ nums-to-scrambles 0))))
    (setf (fset:@ nums-to-scrambles 3)
          (fset:union (fset:@ nums-to-scrambles 1)
                      (fset:set (fset:@ pos-to-scrambled #\a)
                                (fset:@ pos-to-scrambled #\d)
                                (fset:@ pos-to-scrambled #\g))))
    (setf (fset:@ nums-to-scrambles 2)
          (singleton-element (fset:set-difference scrambles
                                                  (fset:range nums-to-scrambles))))
    (unless (fset:equal? (fset:range nums-to-scrambles)
                         scrambles)
      (error "Ok, something has gone really wrong :/"))
    (fset:image (lambda (k v) (values v k))
                nums-to-scrambles)))

(defun solve-7a ()
  (loop for (scrambles outs) in *input*
        summing (loop for out in outs
                      counting (fset:contains? (fset:set 2 4 3 7)
                                               (fset:size out)))))

(defun solve-7b ()
  (loop for (scrambles outs) in *input*
        for scrambles-to-nums = (scrambles-to-nums scrambles)
        summing (parse-integer (str:join "" (mapcar #'write-to-string (mapcar (lambda (x) (fset:@ scrambles-to-nums x))
                                                                              outs))))))
